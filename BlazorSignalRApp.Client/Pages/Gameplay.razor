@page "/gameplay"
@rendermode InteractiveWebAssembly
@using BlazorSignalRApp.Client.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Přehled království</PageTitle>

@if (IsConnected && _gameData.LastUpdated > DateTime.Today)
{
    <h4>Výběr království</h4>
    <div class="form-group">
        <label>
            Moje království:
            <select name="Království" id="kingdomselect" @bind="_selectedKingdomIndex">
                @foreach (var kingdom in _gameData.Kingdoms)
                {
                    <option value="@_gameData.Kingdoms.IndexOf(kingdom)">@kingdom.KingdomName</option>
                }
            </select>
        </label>
    </div>

    <hr/>

    <h1>@_currentKingdom.KingdomName | @_currentKingdom.GetHomeResource().Name</h1>
    
    <hr/>
    
    <h3>Obchodní tabulka</h3>
    <input type="checkbox" @onclick="() => { _orderByKidInHand = !_orderByKidInHand; }" checked=@_orderByKidInHand/>
    <span>Řazení dle prvního sloupce</span>

    <table class="fancy-table">
        <thead>
        <tr>
            <td colspan="3">Dítě má v ruce</td>
            <td colspan="3">Dítě chce</td>
        </tr>
        </thead>

        <tr
            class="no-border-right"
            style=@(_currentKingdom.GetHomeResource().Amount <= _gameData.HomeResourceAmountFreeMoreThan ? "background-color: lightcoral" : "background-color: lightgreen")
        >
            <td colspan="2">NIC!</td>
            <td> =></td>
            <td>@(_gameData.HomeResourceAmountFree)x</td>
            <td>
                @_currentKingdom.GetHomeResource().Name
            </td>
            <td>
                <button @onclick="() => UpdateKingdom(_currentKingdom.GetHomeResource().Name, (-1)*_gameData.HomeResourceAmountFree)"
                        disabled=@(_currentKingdom.GetHomeResource().Amount <= _gameData.HomeResourceAmountFreeMoreThan)>
                    Vydat zdarma
                </button>
            </td>
        </tr>

        @if (_orderByKidInHand)
        {
            @foreach (var offeredResource in _currentKingdom.Resources)
            {
                <tr>
                    <td colspan="6"></td>
                </tr>
                @foreach (var targetResource in _currentKingdom.Resources)
                {
                    <ExchangeTableRow CurrentKingdom="_currentKingdom"
                                      OfferedResource="offeredResource"
                                      Parent="this"
                                      TargetResource="targetResource"
                                      />
                }
            }
        }
        else
        {
            @foreach (var targetResource in _currentKingdom.Resources)
            {
                <tr>
                    <td colspan="6"></td>
                </tr>
                @foreach (var offeredResource in _currentKingdom.Resources)
                {
                    <ExchangeTableRow CurrentKingdom="_currentKingdom"
                                      OfferedResource="offeredResource"
                                      Parent="this"
                                      TargetResource="targetResource"/>
                }
            }
        }

    </table>

    <hr/>

    <h3>Můj sklad</h3>

    <table class="fancy-table">
        @foreach (var resource in _currentKingdom.Resources)
        {
            <tr>
                <td>@resource.Name</td>
                <td>
                    <button
                        @onclick="() => UpdateKingdom(resource.Name, -5)">-5
                    </button>
                </td>
                <td>
                    <button
                        @onclick="() => UpdateKingdom(resource.Name, -1)">-1
                    </button>
                </td>
                <td>
                    @resource.Amount
                </td>
                <td>
                    <button
                        @onclick="() => UpdateKingdom(resource.Name, +1)">+1
                    </button>
                </td>
                <td>
                    <button
                        @onclick="() => UpdateKingdom(resource.Name, +5)">+5
                    </button>
                </td>
            </tr>
        }
    </table>

    <hr/>
    
    <button @onclick="RevertTransaction">Vrátit poslední transakci</button>
    <ul>
        @foreach (var transaction in _lastTransactions)
        {
            <li>@transaction.Key: @transaction.Value</li>
        }
    </ul>

    <hr/>

    <p>Poslendí změna: @_gameData.LastUpdated.ToLongTimeString()</p>
}
else
{
    <p>Chvilku strpení - načítám data :)</p>
}

@code {
    private bool _orderByKidInHand = true;
    private int _selectedKingdomIndex = 0;
    private Kingdom _currentKingdom => _gameData.Kingdoms[_selectedKingdomIndex];
    private HubConnection? hubConnection;
    public GameData _gameData = new GameData();
    private string? userInput;
    private string? messageInput;
    public Dictionary<string, int> _lastTransactions = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamedatahub"))
            .Build();

        hubConnection.On<GameData>("NewGameData", (gameData) =>
        {
            _gameData = gameData;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("Sync");
    }

    private async Task RevertTransaction()
    {
        foreach (var transaction in _lastTransactions)
        {
            var updateContract = new GameDataUpdateContract
            {
                KingdomName = _currentKingdom.KingdomName,
                ResourceName = transaction.Key,
                Amount = transaction.Value * -1
            };

            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("UpdateGameData", updateContract);
            }
            
        }
        _lastTransactions.Clear();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateGameData", _gameData);
        }
    }

    public async Task UpdateKingdom(string resourceName, int amount)
    {
        // Make sure we don't set the resource to negative numbers
        if (_currentKingdom.Resources.First(r => r.Name == resourceName).Amount == 0 && amount == -1)
        {
            return;
        }

        var updateContract = new GameDataUpdateContract
        {
            KingdomName = _currentKingdom.KingdomName,
            ResourceName = resourceName,
            Amount = amount
        };

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateGameData", updateContract);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
