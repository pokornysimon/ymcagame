@page "/gameplay"
@rendermode InteractiveWebAssembly
@using BlazorSignalRApp.Client.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Přehled království</PageTitle>

@if (IsConnected)
{
    <h3>Výběr království</h3>
    <div class="form-group">
        <label>
            Moje království:
            <select name="Království" id="kingdomselect" @bind="_selectedKingdomIndex">
                @foreach (var kingdom in _gameData.Kingdoms)
                {
                    <option value="@_gameData.Kingdoms.IndexOf(kingdom)">@kingdom.KingdomName</option>
                }
            </select>
        </label>
    </div>

    <hr/>

    <h3>Cena surovin</h3>
    <table>
        <tr>
            <td colspan="2" rowspan="1"></td>
            <td colspan="6">VYDÁM</td>
        </tr>
        <tr>

            <td rowspan="6">DOSTANU</td>
            <td></td>
            @foreach (var resource in _currentKingdom.Resources)
            {
                <td>@resource.Name</td>
            }
        </tr>

        @foreach (var wantResource in _currentKingdom.Resources)
        {
            <tr>

                <td><b>@wantResource.Name</b> <span style="font-size: 10px">[@wantResource.Value]</span></td>
                @foreach (var offerResource in _currentKingdom.Resources)
                {
                    if (wantResource.Name != offerResource.Name)
                    {
                        <td>
                            @if (offerResource.Amount != 0 && offerResource.Value != 0)
                            {
                                @_currentKingdom.GetExchangeAmount(wantResource.Name, offerResource.Name)
                            }
                            else
                            {
                                <span>0</span>
                            }
                        </td>
                    }
                    else
                    {
                        <td></td>
                    }
                }
            </tr>
        }
    </table>

    <hr/>

    <h3>Správa skladu</h3>
    <table>
        <thead>
        <tr>
            <th>
                Království
            </th>
            @foreach (var resource in _gameData.Kingdoms[0].Resources)
            {
                <th>
                    @resource.Name
                </th>
            }
        </tr>
        </thead>
        <tbody>
        @foreach (var kingdom in _gameData.Kingdoms)
        {
            <tr>
                <td>@kingdom.KingdomName</td>
                @foreach (var resource in kingdom.Resources)
                {
                    <td>
                        @if (_gameData.Kingdoms.IndexOf(kingdom) == _selectedKingdomIndex)
                        {
                            <button
                                @onclick="() => UpdateKingdom(_gameData.Kingdoms.IndexOf(kingdom), resource.Name, -1)">-
                            </button>
                        }
                        @resource.Amount
                        @if (_gameData.Kingdoms.IndexOf(kingdom) == _selectedKingdomIndex)
                        {
                            <button
                                @onclick="() => UpdateKingdom(_gameData.Kingdoms.IndexOf(kingdom), resource.Name, +1)">+
                            </button>
                        }
                    </td>
                }

            </tr>
        }
        </tbody>
    </table>
}

@code {
    private int _selectedKingdomIndex = 0;
    private Kingdom _currentKingdom => _gameData.Kingdoms[_selectedKingdomIndex];
    private HubConnection? hubConnection;
    private GameData _gameData = new GameData();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamedatahub"))
            .Build();

        hubConnection.On<GameData>("NewGameData", (gameData) =>
        {
            _gameData = gameData;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("Sync");
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateGameData", _gameData);
        }
    }

    private async Task UpdateKingdom(int kingdomIndex, string resourceName, int amount)
    {
        var updateContract = new GameDataUpdateContract
        {
            KingdomName = _currentKingdom.KingdomName,
            ResourceName = resourceName,
            Amount = amount
        };
        
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateGameData", updateContract);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
