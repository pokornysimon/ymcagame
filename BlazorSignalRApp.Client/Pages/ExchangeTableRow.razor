@using BlazorSignalRApp.Client.Models
@using BlazorSignalRApp.Client.Pages

@if (OfferedResource.Name != TargetResource.Name && Parent._gameData.GetExchangeRate(OfferedResource.Amount, TargetResource.Amount) != 0)
{
    <tr style=@(Parent._gameData.GetExchangeRate(OfferedResource.Amount, TargetResource.Amount) > 0 ? "background-color: lightgreen" : "background-color: lightcoral")>
        @if (Parent._gameData.GetExchangeRate(OfferedResource.Amount, TargetResource.Amount) > 0)
        {
            <td>1x</td>
            <td>@OfferedResource.Name</td>
        }
        else
        {
            <td>@(Parent._gameData.GetExchangeRate(OfferedResource.Amount, TargetResource.Amount) * -1)x</td>
            <td>@OfferedResource.Name</td>
        }

        <td>=></td>
        @if (Parent._gameData.GetExchangeRate(OfferedResource.Amount, TargetResource.Amount) > 0)
        {
            <td>@(Parent._gameData.GetExchangeRate(OfferedResource.Amount, TargetResource.Amount))x</td>
            <td>@TargetResource.Name</td>
        }
        else
        {
            <td>1x</td>
            <td>@TargetResource.Name</td>
        }
        <td>
            <button
                @onclick="async () => { 
                Parent._lastTransactions.Clear();
                    if (Parent._gameData.GetExchangeRate(OfferedResource.Amount, TargetResource.Amount) > 0) {
                        await UpdateKingdom(OfferedResource.Name, 1);
                        await UpdateKingdom(TargetResource.Name, Parent._gameData.GetExchangeRate(OfferedResource.Amount, TargetResource.Amount)*-1);
                        Parent._lastTransactions.Add(OfferedResource.Name, 1);
                        Parent._lastTransactions.Add(TargetResource.Name, Parent._gameData.GetExchangeRate(OfferedResource.Amount, TargetResource.Amount)*-1); 
                    }else { 
                        await UpdateKingdom(OfferedResource.Name, Parent._gameData.GetExchangeRate(OfferedResource.Amount, TargetResource.Amount)*-1);
                        await UpdateKingdom(TargetResource.Name, -1); 
                        Parent._lastTransactions.Add(OfferedResource.Name, Parent._gameData.GetExchangeRate(OfferedResource.Amount, TargetResource.Amount)*-1);
                        Parent._lastTransactions.Add(TargetResource.Name, -1);
                                    } }"
            >Prodat
            </button>
        </td>
    </tr>
}




@code {
    [Parameter] public Kingdom CurrentKingdom { get; set; }
    [Parameter] public Resource OfferedResource { get; set; }
    [Parameter] public Resource TargetResource { get; set; }
    [Parameter] public Gameplay Parent { get; set; }

    private async Task UpdateKingdom(string resourceName, int amount)
    {
        await Parent.UpdateKingdom(resourceName, amount);
    }

}